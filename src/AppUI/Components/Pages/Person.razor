@page "/person"

@using Services;
@using Shared.Infrastructure.Database.Entities;
@using ViewModels;
@using Components.Dialogs;

@inject IDialogService dialogService;
@inject ISnackbar snackbar;
@inject PersonViewModel model;

<MudDataGrid T="PersonEntity" Items="@model.People" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@QuickSearch"
Hideable="true" ReadOnly="false" EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.OnRowClick" Bordered ="true"
Virtualize="true" FixedHeader="true" FixedFooter="true" MultiSelection="true" SelectedItemsChanged="@(person => this.model.SelectedPeople = person)"
Height="450px" CommittedItemChanges="@model.UpdatePerson">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Personenverwaltung</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Suche" Adornment="Adornment.Start"
        Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="PersonEntity" />
        <PropertyColumn Property="x => x.FirstName" Title="Vorname" />
        <PropertyColumn Property="x => x.LastName" Title="Nachname" />
        <PropertyColumn Property="x => x.BirthDate" Title="Geburtsdatum">
            <EditTemplate Context="person">
                <MudDatePicker Label="Geburtsdatum"
                Date="@(person.Item.BirthDate.HasValue 
                        ? person.Item.BirthDate.Value.ToDateTime(new TimeOnly(0, 0)) 
                        : (DateTime?)null)"
                DateChanged="@(newDate => person.Item.BirthDate = newDate.HasValue 
                        ? DateOnly.FromDateTime(newDate.Value) 
                        : null)"
                Mask="@(new DateMask("dd.MM.yyyy"))"
                DateFormat="dd.MM.yyyy" RelativeWidth="DropdownWidth.Adaptive" />
            </EditTemplate>
        </PropertyColumn>

        <TemplateColumn Title="Adressen" Hidden="true" Editable="true">
            <EditTemplate Context="person">
                <MudText Typo="Typo.h6">Adressen</MudText>
                <MudDataGrid T="AddressEntity" Items="@person.Item.Addresses"
                EditMode="DataGridEditMode.Form" Bordered="true" ReadOnly="false" EditTrigger="DataGridEditTrigger.OnRowClick"
                Hideable="true" SortMode="SortMode.Multiple" MultiSelection="true" SelectedItemsChanged="@(address => this.model.SelectedAddresses = address)"
                CommittedItemChanges="@model.UpdateAddress">
                    <Columns>
                        <SelectColumn T="AddressEntity" />
                        <PropertyColumn Property="x => x.Street" Title="Straße" />
                        <PropertyColumn Property="x => x.HouseNumber" Title="Hausnummer" />
                        <PropertyColumn Property="x => x.City" Title="Stadt" />
                        <PropertyColumn Property="x => x.ZipCode" Title="PLZ" />
                        <PropertyColumn Property="x => x.AdditionalInfo" Required="false" Title="Zusatzinfo" />
                    </Columns>
                    <PagerContent>
                        <MudButton OnClick="@(() => OpenAddAddressDialog(person.Item))" 
                        Color="Color.Primary" Variant="Variant.Filled">Hinzufügen</MudButton>
                        <MudButton OnClick="@(() => DeleteAddresses(person.Item))" 
                        Color="Color.Error" Variant="Variant.Filled">Löschen</MudButton>
                    </PagerContent>
                </MudDataGrid>
            </EditTemplate>
        </TemplateColumn>

        <TemplateColumn Title="Telefonverbindungen" Hidden="true" Editable="true">
            <EditTemplate Context="person">
                <MudText Typo="Typo.h6">Telefonverbindungen</MudText>
                <MudDataGrid T="TelephoneConnectionEntity" Items="@person.Item.TelephoneConnections" 
                EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.OnRowClick" Bordered="true" ReadOnly="false" Hideable="true" 
                SortMode="SortMode.Multiple" MultiSelection="true" SelectedItemsChanged="@(connection => this.model.SelectedConnections = connection)"
                CommittedItemChanges="@model.UpdateConnection">
                    <Columns>
                        <SelectColumn T="TelephoneConnectionEntity" />
                        <PropertyColumn Property="x => x.PhoneNumber" Title="Telefonnummer" />
                    </Columns>
                    <PagerContent>
                        <MudButton OnClick="@(() => OpenAddTelephoneConnectionDialog(person.Item))" 
                        Color="Color.Primary" Variant="Variant.Filled">Hinzufügen</MudButton>
                        <MudButton OnClick="@(() => DeleteConnections(person.Item))" 
                        Color="Color.Error" Variant="Variant.Filled">Löschen</MudButton>
                    </PagerContent>
                </MudDataGrid>
            </EditTemplate>
        </TemplateColumn>
    </Columns>

    <PagerContent>
        <MudButton OnClick="@FillGrid" Color="Color.Info" Variant="Variant.Filled">Daten laden</MudButton>
        <MudButton OnClick="@OpenAddPersonDialog" Color="Color.Primary" Variant="Variant.Filled">Hinzufügen</MudButton>
        <MudButton OnClick="@DeletePeople" Color="Color.Error" Variant="Variant.Filled">Löschen</MudButton>
    </PagerContent>
</MudDataGrid>

@code
{

    private string searchString = string.Empty;
    private HashSet<AddressEntity> selectedAddresses = [];
    private HashSet<TelephoneConnectionEntity> selectedConnections = [];
    private HashSet<PersonEntity> selectedPeople = [];

    private Func<PersonEntity, bool> QuickSearch => x =>
    {
        if (string.IsNullOrEmpty(searchString))
        {
            return true;
        }

        if (x.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        if (x.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        if (x.ToString()?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
        {
            return true;
        }

        if (DateTime.TryParse(searchString, out var dateTime) 
            && x.BirthDate.HasValue 
            && DateOnly.FromDateTime(dateTime) is DateOnly dateOnly 
            && (x.BirthDate == dateOnly 
                || x.BirthDate.Value.Year == dateOnly.Year 
                || x.BirthDate.Value.Month == dateOnly.Month
                || x.BirthDate.Value.Day == dateOnly.Day))
        {
            return true;
        }

        return false;
    };

    private async Task FillGrid()
    {
        try
        {
            await this.model.FetchPeople();
        }
        catch (Exception)
        {
            this.snackbar.Add("Fehler beim Abrufen der Personen!", Severity.Error);

            return;
        }

        this.snackbar.Add("Personen erfolgreich geladen", Severity.Success);
    }

    private async Task OpenAddAddressDialog(PersonEntity person)
    {
        var result = await this.OpenDialog<AddressEntity, AddressDialog>("address");

        if (result is { } address)
        {
            person.Addresses.Add(address);
        }
    }

    private async Task OpenAddTelephoneConnectionDialog(PersonEntity person)
    {
        var resultData = await this.OpenDialog<TelephoneConnectionEntity, TelephoneConnectionDialog>("connection");

        if (resultData is { } connection)
        {
            person.TelephoneConnections.Add(connection);
        }
    }

    private async Task OpenAddPersonDialog()
    {
        var resultData = await this.OpenDialog<PersonEntity, PersonDialog>("person");

        if (resultData is { } person)
        {
            try
            {
                await this.model.CreatePerson(person);  
            }
            catch (Exception)
            {
                this.snackbar.Add("Fehler beim Anlegen der neuen Person!", Severity.Error);

                return;
            }
        }
    }

    private async Task<TEntity?> OpenDialog<TEntity, TDialogType>(
        string propertyName, 
        string? dialogTitle = null)
        where TDialogType : IComponent
        where TEntity : class, new()
    {
        var newEntity = new TEntity();

        var dialogParams = new DialogParameters { [propertyName] = newEntity };
        var dialog = await this.dialogService.ShowAsync<TDialogType>(
            dialogTitle ?? $"Neue {typeof(TEntity).Name} hinzufügen",
            dialogParams,
            this.GetDialogOptions());

        var result = await dialog.Result;

        if ((result?.Canceled ?? false))
        {
            return null;
        }

        return (TEntity?)result?.Data;
    }

    private DialogOptions GetDialogOptions()
    {
        return new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
    }

    private async Task DeleteAddresses(PersonEntity person)
    {
        var errors = await this.model.DeleteAddresses(person);

        if (errors.Count > 0)
        {
            foreach (var error in errors)
            {
                this.snackbar.Add($"Fehler beim Löschen von Adresse {error}!", Severity.Error);
            }

            return;
        }

        this.snackbar.Add("Löschen von Adressen erfolgreich", Severity.Success);
    }

    private async Task DeleteConnections(PersonEntity person)
    {
        var errors = await this.model.DeleteConnections(person);

        if (errors.Count > 0)
        {
            foreach (var error in errors)
            {
                this.snackbar.Add($"Fehler beim Löschen von Telefonverbindung {error}!", Severity.Error);
            }

            return;
        }

        this.snackbar.Add("Löschen von Telefonverbindungen erfolgreich", Severity.Success);
    }

    private async Task DeletePeople()
    {
        var errors = await this.model.DeletePeople();

        if (errors.Count > 0)
        {
            foreach (var error in errors)
            {
                this.snackbar.Add($"Person {error} konnte nicht gelöscht werden", Severity.Error);
            }

            return;
        }

        this.snackbar.Add($"Personen wurden erfolgreich gelöscht", Severity.Success);
    }
}
